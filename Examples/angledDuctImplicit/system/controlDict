/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.7.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      binary;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     rhoPorousSimpleFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         100;

deltaT          1;

writeControl    timeStep;

writeInterval   10;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression compressed;

timeFormat      general;

timePrecision   6;

graphFormat     raw;

runTimeModifiable yes;

functions
(
    pressureToFilterVolAvg
    {
        type patchExpression;
        variables "pFilter{cellZone'porosity}=sum(p*vol())/sum(vol());";
        accumulations (
            average
        );
        patches (
            inlet 
            outlet
        );
        expression "p-pFilter";
        verbose true;
    }
    pressureToFilter
    {
        type patchExpression;
        variables "pFilter{cellZone'porosity}=average(p);";
        accumulations (
            average
        );
        patches (
            inlet 
            outlet
        );
        expression "p-pFilter";
        verbose true;
    }
    distanceToFilter
    {
        type patchExpression;
        variables "pFilter{cellZone'porosity}=average(pos());";
        accumulations (
            average
        );
        patches (
            inlet 
            outlet
        );
        expression "mag(pos()-pFilter)";
        verbose true;
    }
    alternatePressureToFilter
    {
        type swakExpression;
        valueType patch;
        patchName outlet;
        variables "pFilter{cellZone'porosity}=average(p);";
        accumulations (
            average
        );
        expression "p-pFilter";
        verbose true;
    }
    alternatePressureToFilter2
    {
        type swakExpression;
        valueType cellZone;
        zoneName porosity;
        variables "pRaus{outlet}=average(p);";
        accumulations (
            average
        );
        expression "pRaus-p";
        verbose true;
    }
    alternatePressureToFilter3
    {
        type swakExpression;
        valueType cellSet;
        setName porosity;
        variables "pRaus{outlet}=average(p);";
        accumulations (
            average
        );
        expression "pRaus-p";
        verbose true;
    }
    alternatePressureToFilter4
    {
        type swakExpression;
        valueType patch;
        patchName outlet;
        variables "pFilter{cellSet'porosity}=average(p);";
        accumulations (
            average
        );
        expression "p-pFilter";
        verbose true;
    }
    // pressureOverFiler
    // {
    //     type swakExpression;
    //     valueType faceZone;
    //     zoneName beforeFilter;
    //     variables "pAfter{faceSet'afterFilter}=average(p);";
    //     accumulations (
    //         average
    //     );
    //     expression "p-pAfter";
    //     verbose true;
    // }
    flowBeforeSet
    {
        type swakExpression;
        valueType faceSet;
        setName beforeFilter;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
    flowAfterSet
    {
        type swakExpression;
        valueType faceSet;
        setName afterFilter;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
    flowBeforeZone
    {
        type swakExpression;
        valueType faceZone;
        zoneName beforeFilter;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
    flowAfterZone
    {
        type swakExpression;
        valueType faceZone;
        zoneName afterFilter;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
    flowInlet
    {
        type swakExpression;
        valueType patch;
        patchName inlet;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
    flowOutlet
    {
        type swakExpression;
        valueType patch;
        patchName outlet;
        expression "phi";
        accumulations (
            sum
        );
        verbose true;
    }
);

libs ( 
    "libOpenFOAM.so" 
    "libgroovyBC.so" 
    "libsimpleSwakFunctionObjects.so" 
    "libswakFunctionObjects.so" 
    "libswakTopoSources.so" 
) ;

// ************************************************************************* //
